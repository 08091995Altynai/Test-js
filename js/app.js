//    Что такое fetch и написать пример?
// fetch принимает новый Promise и работает с API,а вся суть Promise заключается в featch. 
// простыми словами метод  fetch() сетевые запросы которые подгружают новую информацию.
// fetch принимает url и options
// fetch("https://httpbin.org/post", {   здесь записываем url
//   method: "POST",     в примере пишем  пост запрос
//   headers: {
//     Accept: "application/json",  то что она принимает
//     "Content-Type": "application/json; charset=UTF-8",  тип контента 
//   },
//   body: JSON.stringify({ k: "v" }), переводим в строку
// });


//   Что такое Promise и как их использовать?
// Promise это обьект, позволяющий выполнять асинхроные запросы по очереди 
//Promise принимает внутри 2 функции resolve вызывает код когда в нем нет ошибок, .then принимает стрелочную функцию и then вызывает resolve  
// 2 функция reject вызывается когда в коде есть ошибка, вызываем его с помощью .catch
// есть ущу 3я функция finally которая вызывается в любом случае 
// на примере используем функцию с ошибкой
// let p = new Promise((resolve, reject) => {
//     // то же что reject(new Error(":("))
//     throw new Error(":(");
//   })
  
//   p.catch(alert); // Error: :( 



//    Рассказать про контекст this?
// This — это ссылка на контекст исполнения функции. 
// Получается, что this тесно связан с функциями и рассматривается относительно них. (кроме => функций!)
// Вне функции this ссылаеться на глобальный контекст


//    async await определение и пример?
// это асинхронная функция, когда асиннхроный код надо ждать
// Работаем с методами async await 
// async function get (url){  отправляем запрос 
//     const res = await fetch (url) ожидаем запрос 
//     // и если не ок
//     if(!res.ok)
//     // и создаем ошибку
//     throw new Error ('connot fatch $(url), storis: $(res.status)')
//     // и ждем ответа
//     return await res.json()  
// }


//  Стрелочная функция и чем отличие от обычной функции?
// 1)функции которые можно запускать на прямую-это регулярные функции 
//  function get() {    
// }
// get()

// 2)или можно присвоить переменной.
//  const get = function get() {    
// }
// get()

// 3)После можно сделать функцию анонимной
// const get = function () {   
// }
// get()

// стрелочные функции похожи на версию обычных функций, только в ней не пишется имя
// const get = () => {   
// }
// get()
// Если есть один параметр, можно опустить круглые скобки. И если есть только один оператор, также можно опустить фигурные скобки.
// В качестве методов объекта можно использовать как стрелочные, так и обычные функции.
// Самое большое различие между этими двумя функциями, и оно связано с тем, как this привязан к методу.
// пример:
// const car = {
//     brand: 'Porsche',
//     model: 'Panamero',
//     start: function() {
//       console.log(`Started ${this.brand} ${this.model}`)
//     },
//     stop: () => {
//       console.log(`Stopped ${this.brand} ${this.model}`)
//     }
//   }
